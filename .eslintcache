[{"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js":"1","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js":"2","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js":"3","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js":"4","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js":"5","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js":"6","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js":"7","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js":"8","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js":"9","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js":"10","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js":"11","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js":"12"},{"size":334,"mtime":1613926607047,"results":"13","hashOfConfig":"14"},{"size":1667,"mtime":1615653619726,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609432203393,"results":"16","hashOfConfig":"17"},{"size":3861,"mtime":1616260218987,"results":"18","hashOfConfig":"14"},{"size":3215,"mtime":1616269781862,"results":"19","hashOfConfig":"14"},{"size":12054,"mtime":1615749796544,"results":"20","hashOfConfig":"14"},{"size":221,"mtime":1615749502682,"results":"21","hashOfConfig":"14"},{"size":829,"mtime":1615739943900,"results":"22","hashOfConfig":"14"},{"size":5840,"mtime":1615654458768,"results":"23","hashOfConfig":"14"},{"size":5533,"mtime":1616270070405,"results":"24","hashOfConfig":"14"},{"size":6167,"mtime":1616355251529,"results":"25","hashOfConfig":"14"},{"size":296,"mtime":1612119547481,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1xqe0io",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"16gpyma",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js",[],["58","59"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js",[],["60","61"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js",["62","63","64"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport {TrainerContext} from \"../contexts/TrainerContext\";\n\nfunction CustomersList () {\n    const [isLoading, setIsLoading] = useState(true);\n    const {customersList, \n           error,\n           setIsHide,\n           setClassNav,\n           fetchAllCustomers,\n           trainerData, getTrainer} = useContext(TrainerContext);\n\n    // On the first render we look for the customers of the trainer. If we wanted to look for the customers\n    // each time the customersList changed we should put at the end of the useEffect [customersList] instead\n    // of []. Without [] useEffect is executing fetchAllCustomers in each render, with [] only when we\n    // mount the component and with [customersList] each time the customersList changes.\n    useEffect(() => {\n        fetchAllCustomers(\"5ffb2d0deed9fa20eab8044f\"); \n        setIsLoading(false);\n    }, []);\n\n    useEffect(() => {\n        getTrainer(\"martinez.andreu@gmail.com\"); // We get the trainer data\n        setIsLoading(false);\n    }, []);\n\n    // On each first render we hide the burguer menu to avoid it appearing open when we come from another page. \n    useEffect(() => {\n        setIsHide(true)\n        setClassNav(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n    }, [])\n\n    return (\n        <main>\n            <div className=\"flex flex-col items-center\">\n                <header>\n                    <h1 className=\"text-gray-700 text-3xl font-bold uppercase flex flex-col items-center\">Customers List</h1>\n                    <div className=\"flex flex-row\">\n                        <h2 className=\"flex text-yellow-500 text-2xl\">Trainer: </h2>\n                        {trainerData && <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${trainerData.surname}, ${trainerData.name}`}</p>}\n                    </div>\n                </header>\n                <div className=\"flex flex-col items-center\">\n                    { error && <div> { error } </div>}\n                    { isLoading && <div>Loading...</div>}\n                    {customersList && customersList.map(customer => {\n                        return (\n                            <div className=\"flex flex-row custcard transition ease-out duration-500\" key={customer._id}>\n                                <Link className=\"flex flex-row\" to={`/customerdetails/${customer._id}`}>\n                                    \n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${customer.surname}, ${customer.name}`}</p>\n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;-&nbsp;{customer.email}</p>\n                                    \n                                </Link>\n                                <div className=\"flex-row m-auto mt-3 mb-3 transform hover:scale-125\">\n                                    <Link className=\"rounded bg-red-500 text-white p-2 w-20 hover:bg-primary transition ease-out duration-300\" to={`/customersessions/${customer._id}`}>\n                                        Sessions\n                                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                                        </svg>\n                                    </Link>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </main>\n    );\n};\n\nexport default CustomersList;\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js",["65","66","67","68"],"import React, {useContext, useState, useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TrainerContext } from \"../contexts/TrainerContext\";\n\nexport default function CustomerDetails() {\n\n    const { id } = useParams(); // It grabs the id parameter defined on the route.\n    const {customersList, setCustomersList, \n           updateCustomer, \n           isPending, \n           deleteCustomer,\n           setIsHide,\n           setClassNav} = useContext(TrainerContext);\n\n    useEffect(() => {\n        setIsHide(true)\n        setClassNav(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n    }, [])\n\n    let customerData, indexData, error;\n\n    if (customersList !== null) {\n        customerData = customersList.find(customer => customer._id === id);\n        indexData = customersList.findIndex(customer => customer._id === id);\n        const {name, surname} = customerData;\n    } else {\n        error = `The customer with id: ${id} didn't exist `;\n    };\n\n    function handleChange(event) {\n        const { name, value } = event.target; \n        let newCustomerList = [...customersList];\n        if (name.slice(0,9) === 'perimeter' || name.slice(0,10) === 'skinTurgor') {\n            const indexEnds = name.split(\"\").findIndex(digit => digit === \"]\");\n            const index = name.slice(11,indexEnds);\n            if (name.slice(0,9) === 'perimeter') {\n                newCustomerList[indexData].perimeters[index][name.slice(indexEnds+2,22)] = Number(value);\n            } else {\n                newCustomerList[indexData].skinTurgor[index][name.slice(indexEnds+2,22)] = Number(value);\n            };\n        } else if (name === 'weigth' || name === 'heigth') {\n            newCustomerList[indexData][name] = Number(value);\n        } else {\n            newCustomerList[indexData][name] = value; \n        }\n        setCustomersList(newCustomerList);\n    };\n\n    function handleSubmit (event) {\n        event.preventDefault(); // It prevents refreshing the page\n        updateCustomer(indexData);\n    };\n\n    function handleDelete (event) {\n        event.preventDefault();\n        deleteCustomer(indexData);\n    };\n\n    return (\n        <div>\n            <div className=\"max-w-screen-sm my-0 mx-auto text-center\">\n                <h1 className=\"text-gray-700 text-3xl font-bold uppercase\">Customer Details</h1>\n                { error && <div> { error } </div>}\n                { customerData && (\n                    <form className=\"w-full\">\n                        <label className=\"custdetlabel\">Name: </label>\n                        <input className=\"custdetfield\"\n                            key=\"1\"\n                            type=\"text\"\n                            required\n                            name=\"name\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.name}\n                        />\n                        <label className=\"custdetlabel\">Surname: </label>\n                        <input className=\"custdetfield\"\n                            key=\"2\"\n                            type=\"text\"\n                            required\n                            name=\"surname\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.surname}\n                        />\n                        <label className=\"custdetlabel\">Weigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"4\"\n                            type=\"number\"\n                            name=\"weigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.weigth}\n                        />\n                        <label className=\"custdetlabel\">Heigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"5\"\n                            type=\"number\"\n                            name=\"heigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.heigth}\n                        />\n                        <label className=\"custdetlabel\">Birthdate: </label>\n                        <input className=\"custdetfield\"\n                            key=\"6\"\n                            type=\"date\"\n                            name=\"birthdate\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.birthdate.slice(0,4)+\"-\"+\n                                   customerData.birthdate.slice(5,7)+\"-\"+\n                                   customerData.birthdate.slice(8,10)}\n                        />\n                        {customerData.perimeters.length &&\n                         customerData.perimeters.map((perimeter, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Perímeters measured on - {perimeter.perDate.slice(0,4)+\"-\"+\n                                                                 perimeter.perDate.slice(5,7)+\"-\"+\n                                                                 perimeter.perDate.slice(8,10)}</label>\n                                <label className=\"text-yellow-500 text-2xl\"> - Chest: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+100}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perChest\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perChest}\n                                />\n                                <label className=\"custdetlabel\"> - Waist: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+101}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perWaist\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perWaist}\n                                />\n                                <label className=\"custdetlabel\"> - Hip: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+102}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perHip\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perHip}\n                                />\n                            </div>\n                        ))}\n                        {customerData.skinTurgor.length &&\n                         customerData.skinTurgor.map((skinTurgor, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Skin turgor measured on - {skinTurgor.skinDate.slice(0,4)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(5,7)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(8,10)}\n                                </label>\n                                <label className=\"custdetlabel\"> - Skin1: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+200}\n                                    type=\"number\"\n                                    name={\"skinTurgor[\"+index+\"].skin1\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={skinTurgor.skin1}\n                                />\n                                {/* <select>\n                                    <option value=\"Legs\">Legs</option>\n                                    <option value=\"Arms\">Arms</option>\n                                    <option value=\"Waist\">Waist</option>\n                                </select> */}\n                            </div>\n                        ))}\n                        <label className=\"custdetlabel\">Objective: </label>\n                        <input className=\"custdetfield\"\n                            key=\"7\"\n                            name=\"objective\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.objective}\n                        />\n                        <label className=\"custdetlabel\">Injuries and/or disseases: </label>\n                        <input className=\"custdetfield\"\n                            key=\"8\"\n                            name=\"injuriesDiseases\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.injuriesDiseases}\n                        />\n                        {!isPending && \n                            <button className=\"cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                    onClick={handleSubmit}>Update Customer\n                                <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                                </svg> \n                            </button>\n                        }\n                        <br/>\n                        {isPending && \n                            <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Updating customer...\n                            </button>\n                        }\n                        <br/>\n                        {!isPending && \n                            <button className=\"cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" onClick={handleDelete}>Delete Customer\n                                <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                                </svg>\n                            </button>\n                        }\n                        <br/>\n                        {isPending && \n                        <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Deleting customer...</button>}\n                        <br/>\n                    </form>\n                )}\n                <p>It lacks perimeters data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks skin turgor data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks going to look for trainer name</p>\n            </div>          \n        </div>\n    )\n};\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js",["69"],"import React, {useContext, useEffect} from 'react';\nimport { TrainerContext } from \"../contexts/TrainerContext\";\n\nexport default function TrainerDetails() {\n    \n    const {setIsHide, setClassNav} = useContext(TrainerContext);\n\n    useEffect(() => {\n        setIsHide(true)\n        setClassNav(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-col\">\n                <h1 className=\"m-auto\">Trainer Details</h1>\n                <p className=\"m-auto\">Form with trainer data</p>\n                <p className=\"m-auto\">Button to delete the customer</p>\n                <p className=\"m-auto\">Button to update the customer data (created from customer</p>\n            </div>          \n        </div>\n    )\n};\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js",["70"],"import React, {useState, useContext} from 'react';\nimport { Link } from \"react-router-dom\";\nimport {TrainerContext} from \"../../contexts/TrainerContext\";\n\nexport default function Navbar() {\n    \n    // AMN - The state is used locally to control the aspect of the navbar through Tailwind CSS   \n    const {isHide, setIsHide,\n           classNav, setClassNav } = useContext(TrainerContext);\n    \n    function hideUnhide (e) {\n        e.preventDefault();\n        if (isHide) {\n            setIsHide(false);\n            setClassNav(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500\");\n        } else {\n            setIsHide(true)\n            setClassNav(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n        };\n    };\n\n    return (\n        <nav className=\"flex flex-row\" >\n            <div className=\"px-4 cursor-pointer my-6 md:hidden\">\n                <button classList=\"burguer-list\" onClick={hideUnhide}>\n                    <svg className=\"w-8 bg-red-500 text-white mx-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\" />\n                    </svg>\n                </button>\n                <div className=\"flex flex-col items-left px-6\">\n                    <Link to='/signin' className={classNav}>\n                        <span>Log in</span>\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\" />\n                            </svg>\n                    </Link>\n                    <Link to='/signup' className={classNav}>\n                        <span>Sign up</span>\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2\" />\n                            </svg>\n                    </Link>\n                    <Link to='/' className={classNav}>\n                        <span>Customers List</span>\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" />\n                            </svg>\n                    </Link>\n                    <Link to='/trainerdetails' className={classNav}>\n                        <span>Trainer details</span>\n                    </Link>                   \n                </div>\n            </div>\n            <div className=\"flex flex-row items-center m-auto p-6\">\n                <Link to='/signin' className=\"rounded bg-red-500 text-white p-2 ml-4 transform hover:scale-125 hover:bg-primary transition ease-out duration-500 hidden md:block\">\n                    <span>Log in</span>\n                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\" />\n                        </svg>\n                </Link>\n                <Link to='/signup' className=\"rounded bg-red-500 text-white p-2 ml-4 transform hover:scale-125 hover:bg-primary transition ease-out duration-500 hidden md:block\">\n                    <span>Sign up</span>\n                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2\" />\n                        </svg>\n                </Link>\n                <Link to='/' className=\"rounded bg-red-500 text-white p-2 ml-4 transform hover:scale-125 hover:bg-primary transition ease-out duration-500 hidden md:block\">\n                    <span>Customers List</span>\n                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" />\n                        </svg>\n                </Link>\n                <Link to='/trainerdetails' className=\"rounded bg-red-500 text-white p-2 ml-4 transform hover:scale-125 hover:bg-primary transition ease-out duration-500 hidden md:block\">\n                    <span>Trainer details</span>\n                </Link>                   \n            </div>\n        </nav>\n    )\n};\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js",["71","72"],"import React, { useState, createContext } from 'react';\nimport services from \"../lib/service\";\nimport { useHistory } from 'react-router-dom';\n\nexport const TrainerContext = createContext();\n\nfunction TrainerContextProvider (props) {\n    const trainerId = \"5ffb2d0deed9fa20eab8044f\";\n    const trainerEmail = \"martinez.andreu@gmail.com\";\n    \n    const [customersList, setCustomersList] = useState(null);\n    const [customerSessions, setCustomerSessions] = useState(null);\n    const [trainerData, setTrainerData] = useState(null)\n    const [customerData, setCustomerData] = useState(null)\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n    const [isHide, setIsHide] = useState(true);\n    const [classNav, setClassNav] = useState(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n    const history = useHistory();\n    \n    const fetchAllCustomers = async (trainerId) => {\n        try {\n            const customers = await services.getCustomers(trainerId);\n            if (!customers) {\n                throw Error(`The customers from the trainer with id ${trainerId} weren't fetched.`);\n            };\n            setCustomersList(customers);      \n            setError(null);\n        } catch (error) {\n            setError(error.message);\n            console.log(\"Error while getting the customers: \", error);\n        };\n    };\n\n    const updateCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            const customer = await services.updateCustomer(customersList[indexData]._id, customersList[indexData]);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't updated.`);\n            };\n            history.push('/customerslist')\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while updating the customer with id: ${customersList[indexData]._id}`);\n        };\n    };\n\n    const deleteCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            const customer = await services.deleteCustomer(customersList[indexData]._id);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't deleted.`);\n            };\n            history.push('/customerslist')\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while deleting the customer with id: ${customersList[indexData]._id}`);\n        };\n    };\n\n    const getTrainer = async (trainerEmail) => {\n        try {\n            setIsPending(true);\n            const trainer = await services.getTrainer(trainerEmail);\n            setIsPending(false);\n            if (!trainer) {\n                throw Error(`The trainer with email: ${trainerEmail} wasn't found.`);\n            };\n            setTrainerData(trainer);\n            setError(null);            \n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while getting the trainer with email: ${trainerEmail}`);\n        };\n    };\n\n    const fetchAllSessions = async (customerId) => {\n        try {\n            console.log(\"Customer id for getting sessions: \", customerId);\n            const sessions = await services.getSessions(customerId);\n            if (!sessions) {\n                throw Error(`The sessions from the customer with id ${customerId} weren't fetched.`);\n            };\n            setCustomerSessions(sessions);      \n            setError(null);\n        } catch (error) {\n            setError(error.message);\n            console.log(\"Error while getting the sessions: \", error);\n        };\n    };\n\n    const getCustomer = async (customerId) => {\n        try {\n            setIsPending(true);\n            const customer = await services.getCustomer(customerId);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customerId} wasn't found.`);\n            };\n            setCustomerData(customer);\n            setError(null);            \n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while getting the customer with id: ${customerId}`);\n        };\n    };\n\n    return (\n        \n        <TrainerContext.Provider value={{customersList, setCustomersList, \n                                        customerSessions, setCustomerSessions,\n                                        error, setError, \n                                        fetchAllCustomers,\n                                        fetchAllSessions,\n                                        updateCustomer,\n                                        isPending, setIsPending,\n                                        isHide, setIsHide,\n                                        classNav, setClassNav,\n                                        deleteCustomer,\n                                        trainerData, setTrainerData,\n                                        customerData, setCustomerData,\n                                        getTrainer, getCustomer}} >\n            {props.children} \n        </TrainerContext.Provider>\n    );\n};\n\nexport default TrainerContextProvider;\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js",["73","74","75"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":21,"column":8,"nodeType":"84","endLine":21,"endColumn":10,"suggestions":"85"},{"ruleId":"82","severity":1,"message":"86","line":26,"column":8,"nodeType":"84","endLine":26,"endColumn":10,"suggestions":"87"},{"ruleId":"82","severity":1,"message":"88","line":32,"column":8,"nodeType":"84","endLine":32,"endColumn":10,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"88","line":18,"column":8,"nodeType":"84","endLine":18,"endColumn":10,"suggestions":"94"},{"ruleId":"90","severity":1,"message":"95","line":25,"column":16,"nodeType":"92","messageId":"93","endLine":25,"endColumn":20},{"ruleId":"90","severity":1,"message":"96","line":25,"column":22,"nodeType":"92","messageId":"93","endLine":25,"endColumn":29},{"ruleId":"82","severity":1,"message":"88","line":11,"column":8,"nodeType":"84","endLine":11,"endColumn":10,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":24},{"ruleId":"90","severity":1,"message":"98","line":8,"column":11,"nodeType":"92","messageId":"93","endLine":8,"endColumn":20},{"ruleId":"90","severity":1,"message":"99","line":9,"column":11,"nodeType":"92","messageId":"93","endLine":9,"endColumn":23},{"ruleId":"82","severity":1,"message":"100","line":20,"column":8,"nodeType":"84","endLine":20,"endColumn":10,"suggestions":"101"},{"ruleId":"82","severity":1,"message":"102","line":25,"column":8,"nodeType":"84","endLine":25,"endColumn":10,"suggestions":"103"},{"ruleId":"82","severity":1,"message":"88","line":31,"column":8,"nodeType":"84","endLine":31,"endColumn":10,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],["105"],["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllCustomers'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'getTrainer'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has missing dependencies: 'setClassNav' and 'setIsHide'. Either include them or remove the dependency array.",["109"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["110"],"'name' is assigned a value but never used.","'surname' is assigned a value but never used.",["111"],"'trainerId' is assigned a value but never used.","'trainerEmail' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllSessions' and 'id'. Either include them or remove the dependency array.",["112"],"React Hook useEffect has missing dependencies: 'getCustomer' and 'id'. Either include them or remove the dependency array.",["113"],["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"119","fix":"121"},{"desc":"119","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"119","fix":"127"},"Update the dependencies array to be: [fetchAllCustomers]",{"range":"128","text":"129"},"Update the dependencies array to be: [getTrainer]",{"range":"130","text":"131"},"Update the dependencies array to be: [setClassNav, setIsHide]",{"range":"132","text":"133"},{"range":"134","text":"133"},{"range":"135","text":"133"},"Update the dependencies array to be: [fetchAllSessions, id]",{"range":"136","text":"137"},"Update the dependencies array to be: [getCustomer, id]",{"range":"138","text":"139"},{"range":"140","text":"133"},[958,960],"[fetchAllCustomers]",[1098,1100],"[getTrainer]",[1392,1394],"[setClassNav, setIsHide]",[673,675],[403,405],[746,748],"[fetchAllSessions, id]",[863,865],"[getCustomer, id]",[1157,1159]]