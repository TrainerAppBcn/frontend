[{"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js":"1","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js":"2","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js":"3","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js":"4","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js":"5","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js":"6","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js":"7","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js":"8","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js":"9","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js":"10","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js":"11","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js":"12","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/SessionDetails.js":"13","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/reducers/rootReducer.js":"14","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/actions/customerActions.js":"15","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/actions/trainerActions.js":"16"},{"size":709,"mtime":1620741404774,"results":"17","hashOfConfig":"18"},{"size":1646,"mtime":1621324214688,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1609432203393,"results":"20","hashOfConfig":"21"},{"size":4731,"mtime":1621322656606,"results":"22","hashOfConfig":"18"},{"size":4058,"mtime":1621265447658,"results":"23","hashOfConfig":"18"},{"size":14612,"mtime":1621518220899,"results":"24","hashOfConfig":"18"},{"size":221,"mtime":1615749502682,"results":"25","hashOfConfig":"18"},{"size":964,"mtime":1621241856843,"results":"26","hashOfConfig":"18"},{"size":6083,"mtime":1621324255708,"results":"27","hashOfConfig":"18"},{"size":6654,"mtime":1617635236724,"results":"28","hashOfConfig":"18"},{"size":6146,"mtime":1621518919206,"results":"29","hashOfConfig":"18"},{"size":296,"mtime":1612119547481,"results":"30","hashOfConfig":"18"},{"size":11037,"mtime":1621510034980,"results":"31","hashOfConfig":"18"},{"size":5903,"mtime":1621522331619,"results":"32","hashOfConfig":"18"},{"size":9383,"mtime":1621345623411,"results":"33","hashOfConfig":"18"},{"size":904,"mtime":1620750132376,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1xqe0io",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"16gpyma",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js",[],["76","77"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js",[],["78","79"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js",["80","81"],"import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux'; // connect is a HOC function\nimport { fetchAllCustomers, setIsHide } from '../store/actions/customerActions';\nimport { getTrainer } from '../store/actions/trainerActions';\n\nfunction CustomersList (props) {\n    console.log(\"Props: \", props)\n    const [isLoading, setIsLoading] = useState(true);\n    // On the first render we look for the customers of the trainer. If we wanted to look for the customers\n    // each time the customersList changed we should put at the end of the useEffect [customersList] instead\n    // of []. Without [] useEffect is executing fetchAllCustomers in each render, with [] only when we\n    // mount the component and with [customersList] each time the customersList changes.\n    useEffect(() => {\n        //fetchAllCustomers(\"5ffb2d0deed9fa20eab8044f\"); \n        props.fetchAllCustomers(\"5ffb2d0deed9fa20eab8044f\");\n        console.log(\"Props: \", props);\n        setIsLoading(false);\n    }, []);\n\n    useEffect(() => {\n        props.getTrainer(\"martinez.andreu@gmail.com\"); // We get the trainer data\n        setIsLoading(false);\n    }, []);\n\n    return (\n        <main>\n            <div className=\"flex flex-col items-center\">\n                <header>\n                    <h1 className=\"text-gray-700 text-3xl font-bold uppercase flex flex-col items-center\">Customers List</h1>\n                    <div className=\"flex flex-row\">\n                        <h2 className=\"flex text-yellow-500 text-2xl\">Trainer: </h2>\n                        { isLoading && <div className=\"text-gray-600 text-2xl\">Loading...</div>}\n                        {props.trainerData ? <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${props.trainerData.surname}, ${props.trainerData.name}`}</p> : null}\n                    </div>\n                </header>\n                <div className=\"flex flex-col items-center\">\n                    { props.error && <div className=\"text-red-600 text-2xl\"> { props.error } </div>}\n                    { isLoading && <div className=\"text-gray-600 text-2xl\">Loading...</div>}\n                    {props.customersList && props.customersList.map(customer => {\n                        return (\n                            <div className=\"flex flex-row custcard transition ease-out duration-500\" key={customer._id}>\n                                <Link className=\"flex flex-row\" to={`/customerdetails/${customer._id}`}>\n                                    \n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${customer.surname}, ${customer.name}`}</p>\n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;-&nbsp;{customer.email}</p>\n                                    \n                                </Link>\n                                <div className=\"flex-row m-auto mt-3 mb-3 transform hover:scale-125\">\n                                    <Link className=\"rounded bg-red-500 text-white p-2 w-20 hover:bg-primary transition ease-out duration-300\" to={`/customersessions/${customer._id}`}>\n                                        Sessions\n                                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                                        </svg>\n                                    </Link>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </main>\n    );\n};\n\n// a) Takes from Redux store the data that we want from the store\nconst mapStateToProps = (state) => {\n    return {\n      customersList: state.customersList,\n      error: state.error,\n      isHide: state.isHide,\n      setClassNav: state.setClassNav,\n      trainerData: state.trainerData,\n      isCustomerDeleted: state.isCustomerDeleted\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchAllCustomers: (id) => { dispatch(fetchAllCustomers(id)) },\n        getTrainer: (email) => { dispatch(getTrainer(email)) },\n        setIsHide: (isHide) => { dispatch(setIsHide(isHide))},\n    }\n}\n  \n  // b) we pass to the HOC function called 'connect' the info we get from the store so we can use it.\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(CustomersList); // As connect is a HOC function insted of connect(App) we wrapped App with connect()(App)\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js",["82"],"import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux'; // connect is a HOC function\nimport { setIsHide, setCustomerData, updateCustomer, getCustomer, deleteCustomer } from '../store/actions/customerActions';\nimport { useHistory } from 'react-router-dom';\n\nfunction CustomerDetails(props) {\n    console.log(\"Props detail: \", props)\n\n    const history = useHistory();\n    const { id } = useParams(); // It grabs the id parameter defined on the route.\n    console.log(\"Id before useEffect: \", id)\n    useEffect(() => {\n        console.log(\"Id within useEffect: \", id)\n        props.setIsHide(true)\n        props.getCustomer(id)\n    }, [])\n\n    let error;\n\n    // if (props.customerData !== null) {\n    //     localCustomerData = props.customerData\n    // } else {\n    //     error = `The customer with id: ${id} didn't exist `;\n    // };\n    if (props.customerData === null) {\n        error = `The customer with id: ${id} doesn't exist `;\n    };\n    if (props.isCustomerDeleted) {\n        history.push('/');\n    }\n\n    function handleChange(event) {\n        const { name, value } = event.target; \n        let newCustomerData = props.customerData;\n        if (name.slice(0,9) === 'perimeter' || name.slice(0,10) === 'skinTurgor') {\n            const indexEnds = name.split(\"\").findIndex(digit => digit === \"]\");\n            const index = name.slice(11,indexEnds);\n            if (name.slice(0,9) === 'perimeter') {\n                newCustomerData.perimeters[index][name.slice(indexEnds+2,22)] = Number(value);\n            } else {\n                newCustomerData.skinTurgor[index][name.slice(indexEnds+2,22)] = Number(value);\n            };\n        } else if (name === 'weigth' || name === 'heigth') {\n            newCustomerData[name] = Number(value);\n        } else {\n            newCustomerData[name] = value; \n        }\n        props.setCustomerData(newCustomerData);\n        console.log(\"props.customerData: \", props.customerData)\n        //console.log(\"localCustomerData: \", localCustomerData)\n    };\n\n    function handleSubmit (event) {\n        event.preventDefault(); // It prevents refreshing the page\n        props.updateCustomer(props.customerData);\n    };\n\n    function handleBack(event) {\n        event.preventDefault()\n        history.push('/')\n    }\n\n    // AMN - Pending things:\n    // a) To request deletion confirmation before deleting the customer\n    // b) To dedice whether we want to really delete it or mark it as inactive (to avoid losing data for historical reasons)\n    // c) For the sessions to delete or mark them as inactive\n\n    function handleDelete (event) {\n        event.preventDefault();\n        props.deleteCustomer(id);\n    };\n\n    return (\n        <div>\n            <div className=\"max-w-screen-sm my-0 mx-auto text-center\">\n                <h1 className=\"text-gray-700 text-3xl font-bold uppercase\">Customer Details</h1>\n                { error && <div className=\"text-red-600 text-2xl\"> { error } </div>}\n                {/* { localCustomerData && ( */}\n                { props.customerData && (\n                    <form className=\"w-full\">\n                        <p>{props.customerData.name}</p>\n                        <label className=\"custdetlabel\">Name: </label>\n                        <input className=\"custdetfield\"\n                            key=\"1\"\n                            type=\"text\"\n                            required\n                            name=\"name\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.name}\n                        />\n                        <label className=\"custdetlabel\">Surname: </label>\n                        <input className=\"custdetfield\"\n                            key=\"2\"\n                            type=\"text\"\n                            required\n                            name=\"surname\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.surname}\n                        />\n                        <label className=\"custdetlabel\">Weigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"4\"\n                            type=\"number\"\n                            name=\"weigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.weigth}\n                        />\n                        <label className=\"custdetlabel\">Heigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"5\"\n                            type=\"number\"\n                            name=\"heigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.heigth}\n                        />\n                        <label className=\"custdetlabel\">Birthdate: </label>\n                        <input className=\"custdetfield\"\n                            key=\"6\"\n                            type=\"date\"\n                            name=\"birthdate\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.birthdate.slice(0,4)+\"-\"+\n                                   props.customerData.birthdate.slice(5,7)+\"-\"+\n                                   props.customerData.birthdate.slice(8,10)}\n                        />\n                        {props.customerData.perimeters.length &&\n                         props.customerData.perimeters.map((perimeter, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Perímeters measured on - {perimeter.perDate.slice(0,4)+\"-\"+\n                                                                 perimeter.perDate.slice(5,7)+\"-\"+\n                                                                 perimeter.perDate.slice(8,10)}</label>\n                                <label className=\"text-yellow-500 text-2xl\"> - Chest: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+100}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perChest\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={perimeter.perChest}\n                                />\n                                <label className=\"custdetlabel\"> - Waist: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+101}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perWaist\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={perimeter.perWaist}\n                                />\n                                <label className=\"custdetlabel\"> - Hip: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+102}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perHip\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={perimeter.perHip}\n                                />\n                            </div>\n                        ))}\n                        {props.customerData.skinTurgor.length &&\n                         props.customerData.skinTurgor.map((skinTurgor, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Skin turgor measured on - {skinTurgor.skinDate.slice(0,4)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(5,7)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(8,10)}\n                                </label>\n                                <label className=\"custdetlabel\"> - Skin1: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+200}\n                                    type=\"number\"\n                                    name={\"skinTurgor[\"+index+\"].skin1\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={skinTurgor.skin1}\n                                />\n                                {/* <select>\n                                    <option value=\"Legs\">Legs</option>\n                                    <option value=\"Arms\">Arms</option>\n                                    <option value=\"Waist\">Waist</option>\n                                </select> */}\n                            </div>\n                        ))}\n                        <label className=\"custdetlabel\">Objective: </label>\n                        <input className=\"custdetfield\"\n                            key=\"7\"\n                            name=\"objective\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.objective}\n                        />\n                        <label className=\"custdetlabel\">Injuries and/or disseases: </label>\n                        <input className=\"custdetfield\"\n                            key=\"8\"\n                            name=\"injuriesDiseases\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.customerData.injuriesDiseases}\n                        />\n                        <br></br>\n                        <div className=\"flex flex-row justify-around\">\n                            {!props.isPending && \n                                <button className=\"cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                        onClick={handleSubmit}>Update\n                                    <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                                    </svg> \n                                </button>\n                            }\n                            {props.isPending && \n                                <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Updating customer...\n                                </button>\n                            }\n                            {!props.isPending &&\n                                <button className=\"flex flex-row cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                        onClick={handleBack}>Back\n                                    <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                                    </svg>\n                                </button>\n                            }   \n                            {!props.isPending && \n                                <button className=\"cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                        onClick={handleDelete}>Delete\n                                    <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                                    </svg>\n                                </button>\n                            }\n                            {props.isPending && \n                                <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Deleting customer...\n                                </button>\n                            }\n                        </div>\n                        <br></br>\n                    </form>\n                )}\n                <p>It lacks perimeters data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks skin turgor data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks going to look for trainer name</p>\n            </div>          \n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n      customerData: state.customerData,\n      isCustomerDeleted: state.isCustomerDeleted,\n      setIsHide: state.setIsHide,\n      setClassNav: state.setClassNav,\n      isPending: state.isPending,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setIsHide: (isHide) => { dispatch(setIsHide(isHide))},\n        setCustomerData: (newCustomerData) => { dispatch(setCustomerData(newCustomerData))},\n        updateCustomer: (newCustomerData) => { dispatch(updateCustomer(newCustomerData))},\n        getCustomer: (customerId) => { dispatch(getCustomer(customerId))},\n        deleteCustomer: (customerId) => { dispatch(deleteCustomer(customerId))}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerDetails);","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js",["83"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setIsHide } from '../store/actions/customerActions';\n\nfunction TrainerDetails(props) {\n    \n    useEffect(() => {\n        props.setIsHide(true)\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-col\">\n                <h1 className=\"m-auto\">Trainer Details</h1>\n                <p className=\"m-auto\">Form with trainer data</p>\n                <p className=\"m-auto\">Button to delete the customer</p>\n                <p className=\"m-auto\">Button to update the customer data (created from customer</p>\n            </div>          \n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n      setIsHide: state.setIsHide\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setIsHide: (isHide) => { dispatch(setIsHide(isHide))}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrainerDetails);\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js",["84","85"],"import React, { useState, createContext } from 'react';\nimport services from \"../lib/service\";\nimport { useHistory } from 'react-router-dom';\n\nexport const TrainerContext = createContext();\n\nfunction TrainerContextProvider (props) {\n    const trainerId = \"5ffb2d0deed9fa20eab8044f\";\n    const trainerEmail = \"martinez.andreu@gmail.com\";\n    \n    const [customersList, setCustomersList] = useState(null);\n    const [customerSessions, setCustomerSessions] = useState(null);\n    const [trainerData, setTrainerData] = useState(null)\n    const [customerData, setCustomerData] = useState(null)\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n    const [isHide, setIsHide] = useState(true);\n    const [classNav, setClassNav] = useState(\"rounded bg-red-500 text-white p-2 mt-0.5 hover:bg-primary transition ease-out duration-500 hidden\");\n    const history = useHistory();\n    \n    const fetchAllCustomers = async (trainerId) => {\n        try {\n            const customers = await services.getCustomers(trainerId);\n            if (!customers) {\n                throw Error(`The customers from the trainer with id ${trainerId} weren't fetched.`);\n            };\n            setCustomersList(customers);      \n            setError(null);\n        } catch (error) {\n            setError(error.message);\n            console.log(\"Error while getting the customers: \", error);\n        };\n    };\n\n    const updateCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            const customer = await services.updateCustomer(customersList[indexData]._id, customersList[indexData]);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't updated.`);\n            };\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while updating the customer with id: ${customersList[indexData]._id}`);\n        };\n    };\n\n    const deleteCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            const customer = await services.deleteCustomer(customersList[indexData]._id);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't deleted.`);\n            };\n            history.push('/')\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while deleting the customer with id: ${customersList[indexData]._id}`);\n        };\n    };\n\n    const getTrainer = async (trainerEmail) => {\n        try {\n            setIsPending(true);\n            const trainer = await services.getTrainer(trainerEmail);\n            setIsPending(false);\n            if (!trainer) {\n                throw Error(`The trainer with email: ${trainerEmail} wasn't found.`);\n            };\n            setTrainerData(trainer);\n            setError(null);            \n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while getting the trainer with email: ${trainerEmail}`);\n        };\n    };\n\n    const updateSession = async (indexData) => {\n        try {\n            setIsPending(true);\n            const session = await services.updateSession(customerSessions[indexData]._id, customerSessions[indexData]);\n            setIsPending(false);\n            if (!session) {\n                throw Error(`The session with id: ${customerSessions[indexData]._id} wasn't updated.`);\n            };\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while updating the session with id: ${customerSessions[indexData]._id}`);\n        };\n    };\n\n    const fetchAllSessions = async (customerId) => {\n        try {\n            console.log(\"Customer id for getting sessions: \", customerId);\n            const sessions = await services.getSessions(customerId);\n            if (!sessions) {\n                throw Error(`The sessions from the customer with id ${customerId} weren't fetched.`);\n            };\n            setCustomerSessions(sessions);      \n            setError(null);\n        } catch (error) {\n            setError(error.message);\n            console.log(\"Error while getting the sessions: \", error);\n        };\n    };\n\n    const getCustomer = async (customerId) => {\n        try {\n            setIsPending(true);\n            const customer = await services.getCustomer(customerId);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customerId} wasn't found.`);\n            };\n            setCustomerData(customer);\n            setError(null);            \n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while getting the customer with id: ${customerId}`);\n        };\n    };\n\n    function formatTime(oneTime) {\n        const hourNum = oneTime / 100\n        const hourStr = Math.trunc(hourNum).toString().padStart(2, '0')\n        const minStr  = (oneTime - Math.trunc(hourNum) * 100).toString().padStart(2, '0')\n        \n        return hourStr + ':' + minStr\n    }\n\n    function handleClickBack(routeBack) {\n        history.push(routeBack)\n    }\n\n    return (\n        \n        <TrainerContext.Provider value={{customersList, setCustomersList, \n                                        customerSessions, setCustomerSessions,\n                                        error, setError, \n                                        fetchAllCustomers,\n                                        fetchAllSessions,\n                                        updateCustomer,\n                                        updateSession,\n                                        formatTime,\n                                        handleClickBack,\n                                        isPending, setIsPending,\n                                        isHide, setIsHide,\n                                        classNav, setClassNav,\n                                        deleteCustomer,\n                                        trainerData, setTrainerData,\n                                        customerData, setCustomerData,\n                                        getTrainer, getCustomer}} >\n            {props.children} \n        </TrainerContext.Provider>\n    );\n};\n\nexport default TrainerContextProvider;\n",["86","87"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js",["88","89","90"],"import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux'; // connect is a HOC function\nimport { fetchAllSessions, setIsHide, getCustomer } from '../store/actions/customerActions';\nimport { useHistory } from 'react-router-dom';\n\nfunction CustomerSessions(props) {\n\n    const { id } = useParams(); // It grabs the id parameter defined on the route.\n    const [isLoading, setIsLoading] = useState(true);\n    const history = useHistory();\n    \n    // On the first render we look for the sessions of the customer.\n    useEffect(() => {\n        props.fetchAllSessions(id); \n        setIsLoading(false);\n    }, []);\n\n    useEffect(() => {\n        props.getCustomer(id); // We get the customer data\n        setIsLoading(false);\n    }, []);\n\n    // On each first render we hide the burguer menu to avoid it appearing open when we come from another page. \n    useEffect(() => {\n        props.setIsHide(true)\n    }, []);\n\n    function handleBack(event) {\n        event.preventDefault()\n        history.push('/')\n    }\n\n    function formatDate (oneDate) {\n        const theDate = new Date(oneDate);\n        const dd = String(theDate.getDate()).padStart(2, '0');\n        const mm = String(theDate.getMonth() + 1).padStart(2, '0');\n        const yyyy = theDate.getFullYear();\n\n        return yyyy + '/' + mm + '/' + dd;\n    };\n\n    function formatTime(oneTime) {\n        const hourNum = oneTime / 100\n        const hourStr = Math.trunc(hourNum).toString().padStart(2, '0')\n        const minStr  = (oneTime - Math.trunc(hourNum) * 100).toString().padStart(2, '0')\n        \n        return hourStr + ':' + minStr\n    }\n           \n    return (\n        <main>\n            <div className=\"flex flex-col items-center\">\n                <header>\n                    <h1 className=\"text-gray-700 text-3xl font-bold uppercase flex flex-col items-center\">Sessions List</h1>\n                    <div className=\"flex flex-row\">\n                        <h2 className=\"flex text-yellow-500 text-2xl\">Customer: </h2>\n                        {props.customerData && <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${props.customerData.surname}, ${props.customerData.name}`}</p>}\n                    </div>\n                </header>\n                <div className=\"flex flex-col items-center\">\n                    { props.error && <div> { props.error } </div>}\n                    { isLoading && <div>Loading...</div>}\n                    { props.customerSessions && props.customerSessions.map(session => {\n                        return (\n                            <div className=\"flex flex-row custcard transition ease-out duration-500\" key={session._id}>\n                                <Link className=\"flex flex-row\" to={`/sessiondetails/${session._id}`}>     \n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${formatDate(session.sessionDate)}`}</p>\n                                        <p className=\"flex text-gray-600 text-2xl\">&nbsp;{`${formatTime(session.sessionTime)}`}</p>   \n                                        \n                                        {session.isSessionPaid ? \n                                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M14.121 15.536c-1.171 1.952-3.07 1.952-4.242 0-1.172-1.953-1.172-5.119 0-7.072 1.171-1.952 3.07-1.952 4.242 0M8 10.5h4m-4 3h4m9-1.5a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                            </svg> : \n                                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                                            </svg>\n                                        }\n                                        {session.isSessionConfirmed ? \n                                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                            </svg> : \n                                            null\n                                        }\n                                </Link>\n                            </div>\n                        )\n                    })}\n                    <br/>\n                    <button className=\"flex flex-row cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                            onClick={handleBack}>Back\n                        <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                        </svg>\n                    </button>\n                    <br/>\n                </div>\n            </div>\n        </main>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n      customerSessions: state.customerSessions,\n      customerData: state.customerData,\n      setIsHide: state.setIsHide,\n      setClassNav: state.setClassNav,\n      error: state.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchAllSessions: (id) => { dispatch(fetchAllSessions(id)) },\n        getCustomer: (customerId) => { dispatch(getCustomer(customerId))},\n        setIsHide: (isHide) => { dispatch(setIsHide(isHide))},\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerSessions);","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/SessionDetails.js",["91","92"],"import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux'; // connect is a HOC function\nimport { setIsHide, setSessionData, updateSession, deleteSession, getSession } from '../store/actions/customerActions';\nimport { useHistory } from 'react-router-dom';\n\nfunction SessionDetails(props) {\n\n    const history = useHistory();\n    const { id } = useParams(); // It grabs the id parameter defined on the route.\n\n    useEffect(() => {\n        props.setIsHide(true)\n        props.getSession(id)\n    }, [])\n\n    let indexData, error;\n\n    if (props.sessionData === null) {\n        error = `The session with id: ${id} doesn't exist `;\n    };\n\n    if (props.isSessionDeleted) {\n        history.push(`/customersessions/${props.sessionData._id}`);\n    }\n\n    function handleChange(event) {\n        const { name, value } = event.target; \n\n        let newSessionData = props.sessionData;\n        if (name === 'isSessionConfirmed') {\n            console.log(\"IsSessionConfirmed - value: \", value);\n            console.log(\"IsSessionConfirmed - name: \", name);\n            console.log(newSessionData[name]);\n            //newSessionData[name] = !value; \n            newSessionData[name] = !newSessionData[name]; \n            console.log(newSessionData[name]);\n        } else {\n            console.log(\"value: \", value);\n            console.log(\"name: \", name);\n            console.log(newSessionData[name]);\n            newSessionData[name] = value; \n            console.log(newSessionData[name]);\n        }\n        \n        props.setSessionData(newSessionData);\n        console.log(\"props - value: \", props.sessionData)\n    };\n\n    function handleSubmit (event) {\n        event.preventDefault(); // It prevents refreshing the page\n        props.updateSession(props.sessionData);\n    };\n\n    function handleDelete (event) {\n        event.preventDefault();\n        props.deleteSession(id);\n    };\n\n    function handleBack(event) {\n        event.preventDefault()\n        history.push(`/customersessions/${props.sessionData.customerId}`)\n    }\n\n    function formatTime(oneTime) {\n        const hourNum = oneTime / 100\n        const hourStr = Math.trunc(hourNum).toString().padStart(2, '0')\n        const minStr  = (oneTime - Math.trunc(hourNum) * 100).toString().padStart(2, '0')\n        \n        return hourStr + ':' + minStr\n    }\n\n    // let element = document.getElementById(checkbox);\n    // if (props.sessionData.isSessionConfirmed === true) {\n    //     element.setAttribute(\"checked\", \"true\");\n    //     element.checked = true;\n    //     document.getElementById(markbox).classList.add('checked');\n    // } else {\n    //     element.removeAttribute(\"checked\");\n    //     element.checked = false;\n    //     document.getElementById(markbox).classList.remove('checked');\n    // }\n\n    return (\n        <div>\n            <div className=\"max-w-screen-sm my-0 mx-auto text-center\">\n                <header>\n                    <h1 className=\"text-gray-700 text-3xl font-bold uppercase\">Session Details</h1>\n                    <div className=\"flex flex-row justify-between\">\n                        <div className=\"flex flex-row\">\n                            <h2 className=\"flex text-yellow-500 text-2xl\">Date - time: </h2>\n                            {props.sessionData && \n                                <p className=\"flex text-gray-600 text-2xl\">&nbsp;\n                                    {props.sessionData.sessionDate.slice(0,4)+\"-\"+\n                                    props.sessionData.sessionDate.slice(5,7)+\"-\"+\n                                    props.sessionData.sessionDate.slice(8,10)}\n                                </p>\n                            }\n                            {props.sessionData && \n                                <p className=\"flex text-gray-600 text-2xl\">&nbsp;-&nbsp;\n                                    {formatTime(props.sessionData.sessionTime)}\n                                </p>\n                            }\n                        </div>\n                        {props.sessionData && props.sessionData.isSessionPaid ? \n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M14.121 15.536c-1.171 1.952-3.07 1.952-4.242 0-1.172-1.953-1.172-5.119 0-7.072 1.171-1.952 3.07-1.952 4.242 0M8 10.5h4m-4 3h4m9-1.5a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                            </svg> : \n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                            </svg>\n                        }\n                    </div>\n                </header>\n                <br></br>\n                { error && <div> { error } </div>}\n                { props.sessionData && (\n                    <form className=\"w-full\">\n                        <label className=\"custdetlabel\">Effort level: </label>\n                        <input className=\"custdetfield\"\n                            key=\"1\"\n                            type=\"text\"\n                            required\n                            name=\"effortLevel\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.sessionData.effortLevel}\n                        />\n                        <label className=\"custdetlabel\">Satisfaction level: </label>\n                        <input className=\"custdetfield\"\n                            key=\"2\"\n                            type=\"text\"\n                            required\n                            name=\"satisfactionLevel\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            defaultValue={props.sessionData.satisfactionLevel}\n                        />\n                        <div className=\"flex flex-row\">\n                            <label className=\"custdetlabel\">Confirmed: </label>\n                            {props.sessionData.isSessionConfirmed ?\n                                <input className=\"custdetfield\"\n                                    key=\"3\"\n                                    type=\"checkbox\"\n                                    name=\"isSessionConfirmed\"\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={props.sessionData.isSessionConfirmed}\n                                    checked\n                                /> : \n                                <input className=\"custdetfield\"\n                                    key=\"4\"\n                                    type=\"checkbox\"\n                                    name=\"isSessionConfirmed\"\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    defaultValue={props.sessionData.isSessionConfirmed}\n                                />\n                            }\n                        </div>\n                        <br></br>\n                    </form>\n                )}\n                <div className=\"flex flex-row justify-around\">\n                    {!props.isPending && \n                        <button className=\"flex flex-row cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                onClick={handleSubmit}>Update\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                            </svg> \n                        </button>\n                    }\n                    {props.isPending && \n                        <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Updating session...\n                        </button>\n                    }\n                    {!props.isPending &&\n                        <button className=\"flex flex-row cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                onClick={handleBack}>Back\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                            </svg>\n                        </button>\n                    }\n                    {!props.isPending && \n                        <button className=\"flex flex-row cursor-pointer rounded bg-red-500 hover:bg-primary text-white p-2 ml-4\" \n                                onClick={handleDelete}>Delete\n                            <svg className=\"w-5 inline-block ml-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                            </svg>\n                        </button>\n                    }\n                    {props.isPending && \n                        <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Deleting session...\n                        </button>\n                    }\n                </div>\n            </div>          \n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n      sessionData: state.sessionData,\n      isSessionDeleted: state.isSessionDeleted,\n      setIsHide: state.setIsHide,\n      setClassNav: state.setClassNav,\n      isPending: state.isPending,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setIsHide: (isHide) => { dispatch(setIsHide(isHide))},\n        setSessionData: (newSessionData) => { dispatch(setSessionData(newSessionData))},\n        updateSession: (newSessionData) => { dispatch(updateSession(newSessionData))},\n        getSession: (sessionId) => { dispatch(getSession(sessionId))},\n        deleteSession: (sessionId) => { dispatch(deleteSession(sessionId))}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionDetails);","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/reducers/rootReducer.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/actions/customerActions.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/store/actions/trainerActions.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"93","replacedBy":"97"},{"ruleId":"95","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":19,"column":8,"nodeType":"101","endLine":19,"endColumn":10,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":24,"column":8,"nodeType":"101","endLine":24,"endColumn":10,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"105","line":17,"column":8,"nodeType":"101","endLine":17,"endColumn":10,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"103","line":9,"column":8,"nodeType":"101","endLine":9,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":8,"column":11,"nodeType":"110","messageId":"111","endLine":8,"endColumn":20},{"ruleId":"108","severity":1,"message":"112","line":9,"column":11,"nodeType":"110","messageId":"111","endLine":9,"endColumn":23},{"ruleId":"93","replacedBy":"113"},{"ruleId":"95","replacedBy":"114"},{"ruleId":"99","severity":1,"message":"105","line":18,"column":8,"nodeType":"101","endLine":18,"endColumn":10,"suggestions":"115"},{"ruleId":"99","severity":1,"message":"105","line":23,"column":8,"nodeType":"101","endLine":23,"endColumn":10,"suggestions":"116"},{"ruleId":"99","severity":1,"message":"103","line":28,"column":8,"nodeType":"101","endLine":28,"endColumn":10,"suggestions":"117"},{"ruleId":"99","severity":1,"message":"105","line":15,"column":8,"nodeType":"101","endLine":15,"endColumn":10,"suggestions":"118"},{"ruleId":"108","severity":1,"message":"119","line":17,"column":9,"nodeType":"110","messageId":"111","endLine":17,"endColumn":18},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["123"],"React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["124"],["125"],"no-unused-vars","'trainerId' is assigned a value but never used.","Identifier","unusedVar","'trainerEmail' is assigned a value but never used.",["120"],["121"],["126"],["127"],["128"],["129"],"'indexData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"130","fix":"132"},{"desc":"133","fix":"134"},{"desc":"130","fix":"135"},{"desc":"133","fix":"136"},{"desc":"133","fix":"137"},{"desc":"130","fix":"138"},{"desc":"133","fix":"139"},"Update the dependencies array to be: [props]",{"range":"140","text":"141"},{"range":"142","text":"141"},"Update the dependencies array to be: [id, props]",{"range":"143","text":"144"},{"range":"145","text":"141"},{"range":"146","text":"144"},{"range":"147","text":"144"},{"range":"148","text":"141"},{"range":"149","text":"144"},[1051,1053],"[props]",[1197,1199],[704,706],"[id, props]",[241,243],[724,726],[847,849],[1025,1027],[564,566]]