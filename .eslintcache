[{"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js":"1","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js":"2","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js":"3","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js":"4","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js":"5","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js":"6","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js":"7","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js":"8","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js":"9","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js":"10","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js":"11","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js":"12"},{"size":334,"mtime":1613926607047,"results":"13","hashOfConfig":"14"},{"size":1941,"mtime":1613245246124,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609432203393,"results":"16","hashOfConfig":"17"},{"size":3723,"mtime":1613939622112,"results":"18","hashOfConfig":"14"},{"size":2092,"mtime":1612117300073,"results":"19","hashOfConfig":"14"},{"size":11817,"mtime":1613921346109,"results":"20","hashOfConfig":"14"},{"size":221,"mtime":1610476527823,"results":"21","hashOfConfig":"14"},{"size":539,"mtime":1613314724315,"results":"22","hashOfConfig":"14"},{"size":2430,"mtime":1613936288459,"results":"23","hashOfConfig":"14"},{"size":3598,"mtime":1612117129586,"results":"24","hashOfConfig":"14"},{"size":440,"mtime":1613328863829,"results":"25","hashOfConfig":"14"},{"size":296,"mtime":1612119547481,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1xqe0io",{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"16gpyma",{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/index.js",[],["56","57"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/App.js",["58","59","60","61"],"import React from 'react';\nimport { Switch, Route, Redirect, BrowserRouter as Router } from 'react-router-dom';\n// import './App.css';\nimport Navbar from './lib/components/Navbar';\nimport CustomerDetails from './pages/CustomerDetails';\nimport CustomersList from './pages/CustomersList';\nimport TrainerDetails from './pages/TrainerDetails';\nimport CustomerSessions from './pages/CustomerSessions';\nimport Login from './pages/Login';\nimport TrainerProvider from './contexts/TrainerContext';\nimport TrainerContextProvider from './contexts/TrainerContext';\nimport { computeHeadingLevel } from '@testing-library/react';\nimport NotFound from './pages/NotFound';\n\n// IMPORTANT: https://www.pluralsight.com/guides/how-to-pass-data-between-react-components\n\n// [AMN] Until we have the signin process ready I'm passing by props the trainer Id I want to use for test purpose.\n// Last route with \"*\" is at the bottom on purpose. It means that whenever the\n// user writes a non-existing url it will see the NotFound page. The * allows\n// React to catch any url that is not one of the exinting ones.\nfunction App() {\n  const isLoggedin = true; // [AMN] Provisionally till we have the signup/signin ready\n  return (\n    <Router>\n      <div className=\"App font-body \">\n        <Navbar />\n        <TrainerContextProvider >\n          {console.log(\"I'm back from TrainerProvider...\")}\n          <Switch>\n            <Route exact path=\"/\" component={CustomersList}/> \n            <Route exact path=\"/customerdetails/:id\" component={CustomerDetails}/> \n            <Route exact path=\"/customersessions/:id\" component={CustomerSessions}/>\n            <Route exact path=\"/trainerdetails\" component={TrainerDetails}/> \n            <Route exact path=\"/signin\" component={Login}/>\n            <Route path=\"*\"> \n              <NotFound />\n            </Route>\n          </Switch>\n        </TrainerContextProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/reportWebVitals.js",[],["62","63"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomersList.js",["64","65","66"],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/service.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerDetails.js",["67","68","69"],"import React, {useContext, useState} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TrainerContext } from \"../contexts/TrainerContext\";\n\nexport default function CustomerDetails() {\n\n    const { id } = useParams(); // It grabs the id parameter defined on the route.\n    const {customersList, setCustomersList, updateCustomer, isPending, deleteCustomer} = useContext(TrainerContext);\n    let customerData, indexData, error;\n    // console.log(\"CustomersList: \", customersList);\n    // console.log(\"Is Pending: \", isPending);\n    if (customersList !== null) {\n        customerData = customersList.find(customer => customer._id === id);\n        indexData = customersList.findIndex(customer => customer._id === id);\n        // console.log(\"Customer Data: \", customerData);\n        // console.log(customersList[indexData].birthdate.slice(8,10)+\"/\"+customersList[indexData].birthdate.slice(5,7)+\"/\"+customersList[indexData].birthdate.slice(0,4));\n        // console.log(customersList[indexData].birthdate.slice(0,4)+\"-\"+customersList[indexData].birthdate.slice(5,7)+\"-\"+customersList[indexData].birthdate.slice(8,10));\n        const {name, surname} = customerData;\n    } else {\n        error = `The customer with id: ${id} didn't exist `;\n    };\n\n    // const [name, setName] = useState(customerData.name);\n    // const [surname, setSurname] = useState(customerData.surname);\n\n    // function handleChange(event, index) {\n    //     const { name, value } = event.target;\n    //     const newExpenses = [...expenses];\n    //     newExpenses[index] = {\n    //       ...expenses[index],\n    //       [name]: value\n    //     };\n    //     setExpenses(newExpenses);\n    // };\n\n    function handleChange(event) {\n        const { name, value } = event.target; \n        // console.log(\"Name: \", name);\n        // console.log(\"Value: \", value);\n        // console.log(typeof value);\n        let newCustomerList = [...customersList];\n        // console.log(name.slice(0,10));\n        if (name.slice(0,9) === 'perimeter' || name.slice(0,10) === 'skinTurgor') {\n            const indexEnds = name.split(\"\").findIndex(digit => digit === \"]\");\n            const index = name.slice(11,indexEnds);\n            // console.log(\"Index ends: \", indexEnds);\n            if (name.slice(0,9) === 'perimeter') {\n                newCustomerList[indexData].perimeters[index][name.slice(indexEnds+2,22)] = Number(value);\n            } else {\n                newCustomerList[indexData].skinTurgor[index][name.slice(indexEnds+2,22)] = Number(value);\n            };\n        } else if (name === 'weigth' || name === 'heigth') {\n            newCustomerList[indexData][name] = Number(value);\n        } else {\n            newCustomerList[indexData][name] = value; \n        }\n        setCustomersList(newCustomerList);\n    };\n\n    function handleSubmit (event) {\n        event.preventDefault(); // It prevents refreshing the page\n        // console.log(\"Handle submit Customer Data: \", customerData);\n        // console.log(\"Ispending before update: \", isPending);\n        updateCustomer(indexData);\n        // console.log(\"IsPending after update: \", isPending);\n    };\n\n    function handleDelete (event) {\n        event.preventDefault();\n        deleteCustomer(indexData);\n    };\n\n    return (\n        <div>\n            <div className=\"max-w-screen-sm my-0 mx-auto text-center\">\n                <h1 className=\"text-gray-700 text-3xl font-bold uppercase\">Customer Details</h1>\n                { error && <div> { error } </div>}\n                { customerData && (\n                    <form className=\"w-full\">\n                        <label className=\"custdetlabel\">Name: </label>\n                        <input className=\"custdetfield\"\n                            key=\"1\"\n                            type=\"text\"\n                            required\n                            name=\"name\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.name}\n                        />\n                        <label className=\"custdetlabel\">Surname: </label>\n                        <input className=\"custdetfield\"\n                            key=\"2\"\n                            type=\"text\"\n                            required\n                            name=\"surname\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.surname}\n                        />\n                        <label className=\"custdetlabel\">Weigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"4\"\n                            type=\"number\"\n                            name=\"weigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.weigth}\n                        />\n                        <label className=\"custdetlabel\">Heigth: </label>\n                        <input className=\"custdetfield\"\n                            key=\"5\"\n                            type=\"number\"\n                            name=\"heigth\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.heigth}\n                        />\n                        <label className=\"custdetlabel\">Birthdate: </label>\n                        <input className=\"custdetfield\"\n                            key=\"6\"\n                            type=\"date\"\n                            name=\"birthdate\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.birthdate.slice(0,4)+\"-\"+\n                                   customerData.birthdate.slice(5,7)+\"-\"+\n                                   customerData.birthdate.slice(8,10)}\n                        />\n                        {customerData.perimeters.length &&\n                         customerData.perimeters.map((perimeter, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Perímeters measured on - {perimeter.perDate.slice(0,4)+\"-\"+\n                                                                 perimeter.perDate.slice(5,7)+\"-\"+\n                                                                 perimeter.perDate.slice(8,10)}</label>\n                                <label className=\"text-yellow-500 text-2xl\"> - Chest: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+100}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perChest\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perChest}\n                                />\n                                <label className=\"custdetlabel\"> - Waist: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+101}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perWaist\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perWaist}\n                                />\n                                <label className=\"custdetlabel\"> - Hip: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+102}\n                                    type=\"number\"\n                                    name={\"perimeters[\"+index+\"].perHip\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={perimeter.perHip}\n                                />\n                            </div>\n                        ))}\n                        {customerData.skinTurgor.length &&\n                         customerData.skinTurgor.map((skinTurgor, index) => (\n                            <div>\n                                <label className=\"custdetlabel\">Skin turgor measured on - {skinTurgor.skinDate.slice(0,4)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(5,7)+\"-\"+\n                                                                  skinTurgor.skinDate.slice(8,10)}\n                                </label>\n                                <label className=\"custdetlabel\"> - Skin1: </label>\n                                <input className=\"custdetfield\"\n                                    key={index+200}\n                                    type=\"number\"\n                                    name={\"skinTurgor[\"+index+\"].skin1\"}\n                                    onChange={(event) => handleChange(event)}\n                                    // onKeyDown={handleKeyDown}\n                                    value={skinTurgor.skin1}\n                                />\n                                {/* <select>\n                                    <option value=\"Legs\">Legs</option>\n                                    <option value=\"Arms\">Arms</option>\n                                    <option value=\"Waist\">Waist</option>\n                                </select> */}\n                            </div>\n                        ))}\n                        <label className=\"custdetlabel\">Objective: </label>\n                        <input className=\"custdetfield\"\n                            key=\"7\"\n                            name=\"objective\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.objective}\n                        />\n                        <label className=\"custdetlabel\">Injuries and/or disseases: </label>\n                        <input className=\"custdetfield\"\n                            key=\"8\"\n                            name=\"injuriesDiseases\"\n                            onChange={(event) => handleChange(event)}\n                            // onKeyDown={handleKeyDown}\n                            value={customerData.injuriesDiseases}\n                        />\n                        {!isPending && <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" onClick={handleSubmit}>Update Customer</button>}<br/>\n                        {isPending && <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Updating customer...</button>}<br/>\n                        {!isPending && <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" onClick={handleDelete}>Delete Customer</button>}<br/>\n                        {isPending && <button className=\"cursor-pointer rounded bg-red-500 text-white p-2 ml-4\" disabled>Deleting customer...</button>}<br/>\n                    </form>\n                )}\n                <p>It lacks perimeters data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks skin turgor data measurements on a loop(map) with possibilities to add measurements on different dates</p>\n                <p>It lacks going to look for trainer name</p>\n            </div>          \n        </div>\n    )\n};\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/Login.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/TrainerDetails.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/lib/components/Navbar.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/contexts/TrainerContext.js",["70"],"import React, { useState, createContext } from 'react';\nimport services from \"../lib/service\";\nimport { useHistory } from 'react-router-dom';\n\nexport const TrainerContext = createContext();\n\nfunction TrainerContextProvider (props) {\n    const trainerId = \"5ffb2d0deed9fa20eab8044f\";\n    // console.log(\"I'm within provider: \", trainerId);\n    \n    const [customersList, setCustomersList] = useState(null);\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n    const history = useHistory();\n    \n    const fetchAllCustomers = async (trainerId) => {\n        try {\n            // console.log(\"Within try\");\n            const customers = await services.getCustomers(trainerId);\n            if (!customers) {\n                throw Error(`The customers from the trainer with id ${trainerId} weren't fetched.`);\n            };\n            // console.log(\"The customers are: \", customers);\n            setCustomersList(customers);      \n            setError(null);\n        } catch (error) {\n            setError(error.message);\n            console.log(\"Error while getting the customers: \", error);\n        };\n    };\n\n    const updateCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            // console.log(\"IsPending on trainercontext before update: \", isPending);\n            // console.log(\"Within updating customer\");\n            // console.log(\"Index to update: \", indexData);\n            // console.log(\"With customerId: \", customersList[indexData]._id);\n            // console.log(\"Data to update: \", customersList[indexData]);\n            const customer = await services.updateCustomer(customersList[indexData]._id, customersList[indexData]);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't updated.`);\n            };\n            history.push('/customerslist')\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while updating the customer with id: ${customersList[indexData]._id}`);\n        };\n        // console.log(\"IsPending on trainercontext after update: \", isPending);\n    };\n\n    const deleteCustomer = async (indexData) => {\n        try {\n            setIsPending(true);\n            const customer = await services.deleteCustomer(customersList[indexData]._id);\n            setIsPending(false);\n            if (!customer) {\n                throw Error(`The customer with id: ${customersList[indexData]._id} wasn't deleted.`);\n            };\n            history.push('/customerslist')\n            setError(null);\n        } catch (error) {\n            setIsPending(false);\n            setError(error.message);\n            console.log(`Error while deleting the customer with id: ${customersList[indexData]._id}`);\n        };\n    };\n\n    return (\n        \n        <TrainerContext.Provider value={{customersList, setCustomersList, \n                                        error, setError, \n                                        fetchAllCustomers,\n                                        updateCustomer,\n                                        isPending, setIsPending,\n                                        deleteCustomer}} >\n            {/* {console.log(\"TrainerProvider return: \", customersList)}\n            {console.log(\"TrainerProvider function return: \", setCustomersList)} */}\n            {props.children} \n        </TrainerContext.Provider>\n    );\n};\n\nexport default TrainerContextProvider;\n","/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/CustomerSessions.js",[],"/Users/andreumartineznuevo/OneDrive/Andreu/TrainerAppBcn/frontend/src/pages/NotFound.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":25,"nodeType":"77","messageId":"78","endLine":2,"endColumn":33},{"ruleId":"75","severity":1,"message":"79","line":10,"column":8,"nodeType":"77","messageId":"78","endLine":10,"endColumn":23},{"ruleId":"75","severity":1,"message":"80","line":12,"column":10,"nodeType":"77","messageId":"78","endLine":12,"endColumn":29},{"ruleId":"75","severity":1,"message":"81","line":22,"column":9,"nodeType":"77","messageId":"78","endLine":22,"endColumn":19},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},{"ruleId":"75","severity":1,"message":"84","line":8,"column":27,"nodeType":"77","messageId":"78","endLine":8,"endColumn":43},{"ruleId":"75","severity":1,"message":"85","line":9,"column":19,"nodeType":"77","messageId":"78","endLine":9,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":22,"column":8,"nodeType":"88","endLine":22,"endColumn":10,"suggestions":"89"},{"ruleId":"75","severity":1,"message":"90","line":1,"column":28,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"91","line":18,"column":16,"nodeType":"77","messageId":"78","endLine":18,"endColumn":20},{"ruleId":"75","severity":1,"message":"92","line":18,"column":22,"nodeType":"77","messageId":"78","endLine":18,"endColumn":29},{"ruleId":"75","severity":1,"message":"93","line":8,"column":11,"nodeType":"77","messageId":"78","endLine":8,"endColumn":20},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'TrainerProvider' is defined but never used.","'computeHeadingLevel' is defined but never used.","'isLoggedin' is assigned a value but never used.",["94"],["95"],"'setCustomersList' is assigned a value but never used.","'setError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllCustomers'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'useState' is defined but never used.","'name' is assigned a value but never used.","'surname' is assigned a value but never used.","'trainerId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},"Update the dependencies array to be: [fetchAllCustomers]",{"range":"99","text":"100"},[1164,1166],"[fetchAllCustomers]"]